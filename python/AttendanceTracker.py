# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\AttendanceTracker.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
import InputPopup
import mysql.connector
from PyQt5.QtWidgets import QTableWidgetItem, QMessageBox

###################################################################
#                                                                 #
#                       UI Generation                             #
#                                                                 #
###################################################################

class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(849, 625)

        self.tabWidget = QtWidgets.QTabWidget(Dialog)
        self.tabWidget.setGeometry(QtCore.QRect(10, 10, 811, 551))

        ################### TAB 1 - Attendance ####################
        self.tab = QtWidgets.QWidget()
        self.tblAttendance = QtWidgets.QTableWidget(self.tab)
        self.tblAttendance.setGeometry(QtCore.QRect(0, 0, 651, 511))
        self.tblAttendance.setColumnCount(4)
        self.tblAttendance.setHorizontalHeaderLabels(["Student ID", "CRN", "Date", "Attendance"])

        self.btnInfo = QtWidgets.QPushButton("Input Info", self.tab)
        self.btnInfo.setGeometry(QtCore.QRect(670, 20, 120, 40))
        self.tabWidget.addTab(self.tab, "Attendance")

        ################### TAB 2 - Report ####################
        self.tab_2 = QtWidgets.QWidget()
        self.tblAttendance_2 = QtWidgets.QTableWidget(self.tab_2)
        self.tblAttendance_2.setGeometry(QtCore.QRect(0, 0, 651, 511))
        self.tblAttendance_2.setColumnCount(8)
        self.tblAttendance_2.setHorizontalHeaderLabels([
            "Student ID", "Student First", "Student Last", "CRN",
            "Course Name", "Date", "Start/End Time", "Attendance"])

        # Labels for filters and totals
        self.lblStudent = QtWidgets.QLabel("Filter by Student ID", self.tab_2)
        self.lblStudent.setGeometry(QtCore.QRect(670, 20, 150, 20))
        self.lblCRN = QtWidgets.QLabel("Filter by CRN", self.tab_2)
        self.lblCRN.setGeometry(QtCore.QRect(670, 80, 150, 20))
        self.lblCourseName = QtWidgets.QLabel("Filter by Course Name", self.tab_2)
        self.lblCourseName.setGeometry(QtCore.QRect(670, 140, 150, 20))
        self.lblDay = QtWidgets.QLabel("Sort by Day/Week/Month", self.tab_2)
        self.lblDay.setGeometry(QtCore.QRect(670, 200, 150, 20))
        self.lblTotPresent = QtWidgets.QLabel("Total Present:", self.tab_2)
        self.lblTotPresent.setGeometry(QtCore.QRect(670, 280, 150, 20))
        self.lblTotAbsent = QtWidgets.QLabel("Total Absent:", self.tab_2)
        self.lblTotAbsent.setGeometry(QtCore.QRect(670, 310, 150, 20))

        # Filters
        self.cmbStudentID = QtWidgets.QComboBox(self.tab_2)
        self.cmbStudentID.setGeometry(QtCore.QRect(670, 40, 150, 22))
        self.cmbCRN = QtWidgets.QComboBox(self.tab_2)
        self.cmbCRN.setGeometry(QtCore.QRect(670, 100, 150, 22))
        self.cmbCourseName = QtWidgets.QComboBox(self.tab_2)
        self.cmbCourseName.setGeometry(QtCore.QRect(670, 160, 150, 22))

        self.dateEditStart = QtWidgets.QDateEdit(self.tab_2)
        self.dateEditStart.setGeometry(QtCore.QRect(670, 220, 150, 22))
        self.dateEditStart.setCalendarPopup(True)
        self.dateEditEnd = QtWidgets.QDateEdit(self.tab_2)
        self.dateEditEnd.setGeometry(QtCore.QRect(670, 250, 150, 22))
        self.dateEditEnd.setCalendarPopup(True)

        # Totals
        self.totPresentLineEdit = QtWidgets.QLineEdit(self.tab_2)
        self.totPresentLineEdit.setGeometry(QtCore.QRect(670, 300, 150, 22))
        self.totPresentLineEdit.setReadOnly(True)
        self.totAbsentlineEdit = QtWidgets.QLineEdit(self.tab_2)
        self.totAbsentlineEdit.setGeometry(QtCore.QRect(670, 330, 150, 22))
        self.totAbsentlineEdit.setReadOnly(True)

        # Buttons
        self.btnSubmit = QtWidgets.QPushButton("Submit", self.tab_2)
        self.btnSubmit.setGeometry(QtCore.QRect(670, 370, 150, 30))
        self.btnClear = QtWidgets.QPushButton("Clear", self.tab_2)
        self.btnClear.setGeometry(QtCore.QRect(670, 410, 150, 30))

        self.tabWidget.addTab(self.tab_2, "Report")
        self.tabWidget.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        ####################      End UI Generation   ########################

        #########################  Setup Calls ###############################
        self.initialSetup()

    def initialSetup(self):
        self.SetUpEventsTab1()
        self.SetUpEventsTab2()
        self.setupDatabase()
        self.populateFilters()
        self.refreshTbl1()
        self.refreshTbl2()

    def populateFilters(self):
        cursor = self.cnx.cursor()

        cursor.execute("SELECT DISTINCT Student_ID FROM students")
        self.cmbStudentID.clear()
        self.cmbStudentID.addItem("")
        self.cmbStudentID.addItems([str(row[0]) for row in cursor])

        cursor.execute("SELECT DISTINCT CRN FROM courses")
        self.cmbCRN.clear()
        self.cmbCRN.addItem("")
        self.cmbCRN.addItems([str(row[0]) for row in cursor])

        cursor.execute("SELECT DISTINCT course_name FROM courses")
        self.cmbCourseName.clear()
        self.cmbCourseName.addItem("")
        self.cmbCourseName.addItems([row[0] for row in cursor])

        cursor.close()

    #########################################################
    #                   Events FOR TAB 1                    #
    #########################################################

    def SetUpEventsTab1(self):
        self.btnInfo.clicked.connect(self.btnInfo_clicked)

    def btnInfo_clicked(self):
        Dialog = QtWidgets.QDialog()
        form = InputPopup.Ui_Dialog()
        form.setupUi(Dialog, None)
        result = Dialog.exec_()

        if result == 1:
            values = form.getValues()
            self.insert_students(values[:3])
            self.insert_courses(values[4], values[3], values[5])
            self.insert_attendance((values[0], values[4], values[7], values[6]))
            self.refreshTbl1()
            self.refreshTbl2()

    #########################################################
    #                   Events FOR TAB 2                    #
    #########################################################

    def SetUpEventsTab2(self):
        self.btnSubmit.clicked.connect(self.filterReportTab)
        self.btnClear.clicked.connect(self.clearFilters)

    def filterReportTab(self):
        student_id = self.cmbStudentID.currentText()
        crn = self.cmbCRN.currentText()
        course_name = self.cmbCourseName.currentText()
        start_date = self.dateEditStart.date().toString("yyyy-MM-dd")
        end_date = self.dateEditEnd.date().toString("yyyy-MM-dd")

        cursor = self.cnx.cursor()

        base_query = """
                     SELECT s.Student_ID, \
                            s.Student_First_name, \
                            s.Student_last_name, \
                            c.CRN,
                            c.course_name, \
                            a.Date_of_attendance, \
                            c.start_end_time, \
                            a.Attended
                     FROM attendance a
                              LEFT JOIN students s ON a.Student_ID = s.Student_ID
                              LEFT JOIN courses c ON a.CRN = c.CRN
                     WHERE 1 = 1 \
                     """
        filters = []
        values = []

        if student_id and student_id.isdigit():
            filters.append("s.Student_ID = %s")
            values.append(int(student_id))
        if crn and crn.isdigit():
            filters.append("c.CRN = %s")
            values.append(int(crn))
        if course_name:
            filters.append("c.course_name = %s")
            values.append(course_name)
        if start_date and end_date:
            filters.append("a.Date_of_attendance BETWEEN %s AND %s")
            values.append(start_date)
            values.append(end_date)

        query = base_query + (" AND " + " AND ".join(filters) if filters else "")
        cursor.execute(query, values)

        self.tblAttendance_2.setRowCount(0)
        total_present = total_absent = 0

        for row in cursor:
            rowCount = self.tblAttendance_2.rowCount()
            self.tblAttendance_2.insertRow(rowCount)
            for col, val in enumerate(row):
                self.tblAttendance_2.setItem(rowCount, col, QTableWidgetItem(str(val)))
            if str(row[7]).lower() == "present":
                total_present += 1
            elif str(row[7]).lower() == "absent":
                total_absent += 1

        self.totPresentLineEdit.setText(str(total_present))
        self.totAbsentlineEdit.setText(str(total_absent))
        cursor.close()

    def clearFilters(self):
        self.cmbStudentID.setCurrentIndex(0)
        self.cmbCRN.setCurrentIndex(0)
        self.cmbCourseName.setCurrentIndex(0)
        self.dateEditStart.setDate(QtCore.QDate.currentDate())
        self.dateEditEnd.setDate(QtCore.QDate.currentDate())
        self.totPresentLineEdit.clear()
        self.totAbsentlineEdit.clear()
        self.refreshTbl2()

    #########################################################################
    #                              DATABASE                                 #
    #########################################################################

    def setupDatabase(self):
        self.cnx = mysql.connector.connect(user='root', password='123456789', host='127.0.0.1', database='AttendanceTracker')

    def refreshTbl1(self):
        self.tblAttendance.setRowCount(0)
        cursor = self.cnx.cursor()
        cursor.execute("SELECT Student_ID, CRN, Date_of_attendance, Attended FROM attendance")
        for row in cursor:
            rowCount = self.tblAttendance.rowCount()
            self.tblAttendance.insertRow(rowCount)
            for col, val in enumerate(row):
                self.tblAttendance.setItem(rowCount, col, QTableWidgetItem(str(val)))
        cursor.close()

    def refreshTbl2(self):
        self.tblAttendance_2.setRowCount(0)
        cursor = self.cnx.cursor()
        query = """
            SELECT s.Student_ID, s.Student_First_name, s.Student_last_name, c.CRN,
                   c.course_name, a.Date_of_attendance, c.start_end_time, a.Attended
            FROM attendance a
            LEFT JOIN students s ON a.Student_ID = s.Student_ID
            LEFT JOIN courses c ON a.CRN = c.CRN
        """
        cursor.execute(query)
        for row in cursor:
            rowCount = self.tblAttendance_2.rowCount()
            self.tblAttendance_2.insertRow(rowCount)
            for col, val in enumerate(row):
                self.tblAttendance_2.setItem(rowCount, col, QTableWidgetItem(str(val)))
        cursor.close()

    ################# INSERT INFO INTO DATABASE TABLES #######################

    def insert_students(self, student_data):
        cursor = self.cnx.cursor()
        query = """
            INSERT INTO students (Student_ID, Student_First_name, Student_last_name)
            VALUES (%s, %s, %s)
            ON DUPLICATE KEY UPDATE Student_First_name = %s, Student_last_name = %s
        """
        cursor.execute(query, (*student_data, student_data[1], student_data[2]))
        self.cnx.commit()
        cursor.close()

    def insert_courses(self, crn, course_name, time):
        cursor = self.cnx.cursor()
        query = """
            INSERT INTO courses (CRN, course_name, start_end_time)
            VALUES (%s, %s, %s)
            ON DUPLICATE KEY UPDATE course_name = %s, start_end_time = %s
        """
        cursor.execute(query, (crn, course_name, time, course_name, time))
        self.cnx.commit()
        cursor.close()

    def insert_attendance(self, attendance_data):
        cursor = self.cnx.cursor()
        query = """
            INSERT INTO attendance (Student_ID, CRN, Date_of_attendance, Attended)
            VALUES (%s, %s, %s, %s)
            ON DUPLICATE KEY UPDATE Attended = %s
        """
        cursor.execute(query, attendance_data + (attendance_data[3],))
        self.cnx.commit()
        cursor.close()
#hiiii
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())